// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: turbomessage.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TurboMessage_NuevoUsuario_FullMethodName           = "/correos.TurboMessage/nuevoUsuario"
	TurboMessage_RevisarUsuario_FullMethodName         = "/correos.TurboMessage/revisarUsuario"
	TurboMessage_DirectorioUsuario_FullMethodName      = "/correos.TurboMessage/directorioUsuario"
	TurboMessage_EnviarCorreo_FullMethodName           = "/correos.TurboMessage/enviarCorreo"
	TurboMessage_CorreosEntrada_FullMethodName         = "/correos.TurboMessage/correosEntrada"
	TurboMessage_CorreosSalida_FullMethodName          = "/correos.TurboMessage/correosSalida"
	TurboMessage_EliminarCorreosEntrada_FullMethodName = "/correos.TurboMessage/eliminarCorreosEntrada"
	TurboMessage_EliminarCorreosSalida_FullMethodName  = "/correos.TurboMessage/eliminarCorreosSalida"
	TurboMessage_CorreoLeido_FullMethodName            = "/correos.TurboMessage/correoLeido"
)

// TurboMessageClient is the client API for TurboMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TurboMessageClient interface {
	NuevoUsuario(ctx context.Context, in *Usuario, opts ...grpc.CallOption) (*Status, error)
	RevisarUsuario(ctx context.Context, in *Usuario, opts ...grpc.CallOption) (*Status, error)
	DirectorioUsuario(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TurboMessage_DirectorioUsuarioClient, error)
	EnviarCorreo(ctx context.Context, in *Correo, opts ...grpc.CallOption) (*Status, error)
	CorreosEntrada(ctx context.Context, in *Usuario, opts ...grpc.CallOption) (TurboMessage_CorreosEntradaClient, error)
	CorreosSalida(ctx context.Context, in *Usuario, opts ...grpc.CallOption) (TurboMessage_CorreosSalidaClient, error)
	EliminarCorreosEntrada(ctx context.Context, in *Correo, opts ...grpc.CallOption) (*Status, error)
	EliminarCorreosSalida(ctx context.Context, in *Correo, opts ...grpc.CallOption) (*Status, error)
	CorreoLeido(ctx context.Context, in *Correo, opts ...grpc.CallOption) (*Status, error)
}

type turboMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewTurboMessageClient(cc grpc.ClientConnInterface) TurboMessageClient {
	return &turboMessageClient{cc}
}

func (c *turboMessageClient) NuevoUsuario(ctx context.Context, in *Usuario, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, TurboMessage_NuevoUsuario_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turboMessageClient) RevisarUsuario(ctx context.Context, in *Usuario, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, TurboMessage_RevisarUsuario_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turboMessageClient) DirectorioUsuario(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TurboMessage_DirectorioUsuarioClient, error) {
	stream, err := c.cc.NewStream(ctx, &TurboMessage_ServiceDesc.Streams[0], TurboMessage_DirectorioUsuario_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &turboMessageDirectorioUsuarioClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TurboMessage_DirectorioUsuarioClient interface {
	Recv() (*Usuario, error)
	grpc.ClientStream
}

type turboMessageDirectorioUsuarioClient struct {
	grpc.ClientStream
}

func (x *turboMessageDirectorioUsuarioClient) Recv() (*Usuario, error) {
	m := new(Usuario)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *turboMessageClient) EnviarCorreo(ctx context.Context, in *Correo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, TurboMessage_EnviarCorreo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turboMessageClient) CorreosEntrada(ctx context.Context, in *Usuario, opts ...grpc.CallOption) (TurboMessage_CorreosEntradaClient, error) {
	stream, err := c.cc.NewStream(ctx, &TurboMessage_ServiceDesc.Streams[1], TurboMessage_CorreosEntrada_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &turboMessageCorreosEntradaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TurboMessage_CorreosEntradaClient interface {
	Recv() (*Correo, error)
	grpc.ClientStream
}

type turboMessageCorreosEntradaClient struct {
	grpc.ClientStream
}

func (x *turboMessageCorreosEntradaClient) Recv() (*Correo, error) {
	m := new(Correo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *turboMessageClient) CorreosSalida(ctx context.Context, in *Usuario, opts ...grpc.CallOption) (TurboMessage_CorreosSalidaClient, error) {
	stream, err := c.cc.NewStream(ctx, &TurboMessage_ServiceDesc.Streams[2], TurboMessage_CorreosSalida_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &turboMessageCorreosSalidaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TurboMessage_CorreosSalidaClient interface {
	Recv() (*Correo, error)
	grpc.ClientStream
}

type turboMessageCorreosSalidaClient struct {
	grpc.ClientStream
}

func (x *turboMessageCorreosSalidaClient) Recv() (*Correo, error) {
	m := new(Correo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *turboMessageClient) EliminarCorreosEntrada(ctx context.Context, in *Correo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, TurboMessage_EliminarCorreosEntrada_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turboMessageClient) EliminarCorreosSalida(ctx context.Context, in *Correo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, TurboMessage_EliminarCorreosSalida_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turboMessageClient) CorreoLeido(ctx context.Context, in *Correo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, TurboMessage_CorreoLeido_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TurboMessageServer is the server API for TurboMessage service.
// All implementations must embed UnimplementedTurboMessageServer
// for forward compatibility
type TurboMessageServer interface {
	NuevoUsuario(context.Context, *Usuario) (*Status, error)
	RevisarUsuario(context.Context, *Usuario) (*Status, error)
	DirectorioUsuario(*Empty, TurboMessage_DirectorioUsuarioServer) error
	EnviarCorreo(context.Context, *Correo) (*Status, error)
	CorreosEntrada(*Usuario, TurboMessage_CorreosEntradaServer) error
	CorreosSalida(*Usuario, TurboMessage_CorreosSalidaServer) error
	EliminarCorreosEntrada(context.Context, *Correo) (*Status, error)
	EliminarCorreosSalida(context.Context, *Correo) (*Status, error)
	CorreoLeido(context.Context, *Correo) (*Status, error)
	mustEmbedUnimplementedTurboMessageServer()
}

// UnimplementedTurboMessageServer must be embedded to have forward compatible implementations.
type UnimplementedTurboMessageServer struct {
}

func (UnimplementedTurboMessageServer) NuevoUsuario(context.Context, *Usuario) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NuevoUsuario not implemented")
}
func (UnimplementedTurboMessageServer) RevisarUsuario(context.Context, *Usuario) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevisarUsuario not implemented")
}
func (UnimplementedTurboMessageServer) DirectorioUsuario(*Empty, TurboMessage_DirectorioUsuarioServer) error {
	return status.Errorf(codes.Unimplemented, "method DirectorioUsuario not implemented")
}
func (UnimplementedTurboMessageServer) EnviarCorreo(context.Context, *Correo) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarCorreo not implemented")
}
func (UnimplementedTurboMessageServer) CorreosEntrada(*Usuario, TurboMessage_CorreosEntradaServer) error {
	return status.Errorf(codes.Unimplemented, "method CorreosEntrada not implemented")
}
func (UnimplementedTurboMessageServer) CorreosSalida(*Usuario, TurboMessage_CorreosSalidaServer) error {
	return status.Errorf(codes.Unimplemented, "method CorreosSalida not implemented")
}
func (UnimplementedTurboMessageServer) EliminarCorreosEntrada(context.Context, *Correo) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EliminarCorreosEntrada not implemented")
}
func (UnimplementedTurboMessageServer) EliminarCorreosSalida(context.Context, *Correo) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EliminarCorreosSalida not implemented")
}
func (UnimplementedTurboMessageServer) CorreoLeido(context.Context, *Correo) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CorreoLeido not implemented")
}
func (UnimplementedTurboMessageServer) mustEmbedUnimplementedTurboMessageServer() {}

// UnsafeTurboMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TurboMessageServer will
// result in compilation errors.
type UnsafeTurboMessageServer interface {
	mustEmbedUnimplementedTurboMessageServer()
}

func RegisterTurboMessageServer(s grpc.ServiceRegistrar, srv TurboMessageServer) {
	s.RegisterService(&TurboMessage_ServiceDesc, srv)
}

func _TurboMessage_NuevoUsuario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Usuario)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurboMessageServer).NuevoUsuario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TurboMessage_NuevoUsuario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurboMessageServer).NuevoUsuario(ctx, req.(*Usuario))
	}
	return interceptor(ctx, in, info, handler)
}

func _TurboMessage_RevisarUsuario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Usuario)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurboMessageServer).RevisarUsuario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TurboMessage_RevisarUsuario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurboMessageServer).RevisarUsuario(ctx, req.(*Usuario))
	}
	return interceptor(ctx, in, info, handler)
}

func _TurboMessage_DirectorioUsuario_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TurboMessageServer).DirectorioUsuario(m, &turboMessageDirectorioUsuarioServer{stream})
}

type TurboMessage_DirectorioUsuarioServer interface {
	Send(*Usuario) error
	grpc.ServerStream
}

type turboMessageDirectorioUsuarioServer struct {
	grpc.ServerStream
}

func (x *turboMessageDirectorioUsuarioServer) Send(m *Usuario) error {
	return x.ServerStream.SendMsg(m)
}

func _TurboMessage_EnviarCorreo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Correo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurboMessageServer).EnviarCorreo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TurboMessage_EnviarCorreo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurboMessageServer).EnviarCorreo(ctx, req.(*Correo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TurboMessage_CorreosEntrada_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Usuario)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TurboMessageServer).CorreosEntrada(m, &turboMessageCorreosEntradaServer{stream})
}

type TurboMessage_CorreosEntradaServer interface {
	Send(*Correo) error
	grpc.ServerStream
}

type turboMessageCorreosEntradaServer struct {
	grpc.ServerStream
}

func (x *turboMessageCorreosEntradaServer) Send(m *Correo) error {
	return x.ServerStream.SendMsg(m)
}

func _TurboMessage_CorreosSalida_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Usuario)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TurboMessageServer).CorreosSalida(m, &turboMessageCorreosSalidaServer{stream})
}

type TurboMessage_CorreosSalidaServer interface {
	Send(*Correo) error
	grpc.ServerStream
}

type turboMessageCorreosSalidaServer struct {
	grpc.ServerStream
}

func (x *turboMessageCorreosSalidaServer) Send(m *Correo) error {
	return x.ServerStream.SendMsg(m)
}

func _TurboMessage_EliminarCorreosEntrada_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Correo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurboMessageServer).EliminarCorreosEntrada(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TurboMessage_EliminarCorreosEntrada_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurboMessageServer).EliminarCorreosEntrada(ctx, req.(*Correo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TurboMessage_EliminarCorreosSalida_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Correo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurboMessageServer).EliminarCorreosSalida(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TurboMessage_EliminarCorreosSalida_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurboMessageServer).EliminarCorreosSalida(ctx, req.(*Correo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TurboMessage_CorreoLeido_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Correo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurboMessageServer).CorreoLeido(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TurboMessage_CorreoLeido_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurboMessageServer).CorreoLeido(ctx, req.(*Correo))
	}
	return interceptor(ctx, in, info, handler)
}

// TurboMessage_ServiceDesc is the grpc.ServiceDesc for TurboMessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TurboMessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "correos.TurboMessage",
	HandlerType: (*TurboMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "nuevoUsuario",
			Handler:    _TurboMessage_NuevoUsuario_Handler,
		},
		{
			MethodName: "revisarUsuario",
			Handler:    _TurboMessage_RevisarUsuario_Handler,
		},
		{
			MethodName: "enviarCorreo",
			Handler:    _TurboMessage_EnviarCorreo_Handler,
		},
		{
			MethodName: "eliminarCorreosEntrada",
			Handler:    _TurboMessage_EliminarCorreosEntrada_Handler,
		},
		{
			MethodName: "eliminarCorreosSalida",
			Handler:    _TurboMessage_EliminarCorreosSalida_Handler,
		},
		{
			MethodName: "correoLeido",
			Handler:    _TurboMessage_CorreoLeido_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "directorioUsuario",
			Handler:       _TurboMessage_DirectorioUsuario_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "correosEntrada",
			Handler:       _TurboMessage_CorreosEntrada_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "correosSalida",
			Handler:       _TurboMessage_CorreosSalida_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "turbomessage.proto",
}
